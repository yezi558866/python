变量：只能用字母和“_”
%s 取变量值，后面跟 %变量名。
输入变量：raw_input()
判断变量类型：type()
输入变量raw_input()的type类型为str。
转换为int类型，则：int(变量名)
打印颜色：\33[32m------\33[0m
范围表示：range(1,50)
if：条件判断
for：循环
while：循环
break：终止语句，满足条件退出循环操作。
continue：满足条件继续进行循环。
def sayhi()：定义函数用def。
import os：引用系统模块
from os import *: 导入os模块内所有。
help(os.system)：查看帮助。
os.system('ls'):调用系统命令列出当前目录内容。
模块：当前目录下.py就可以当做模块。
python数据结构：列表、元组、字典。
列表：有序项目的数据结构。shoplist = ['apple', 'mango', 'carrot', 'banana']
元组：
字典：


方法、模块、对象

模块：
	--在python中，一个.py文件就称之为一个模块。
	--好处：便于维护；可以被其他地方引用；避免函数名、变量名冲突。
	--为避免模块名冲突，引入按目录来组织模块的方法，成为包。
	--abc.py文件就是一个名字叫abc的模块。
	--如模块名冲突，则可：包.模块，如mycompany.abc。
	--每个包目录下有一个__init__.py的文件，此文件必须存在，否则python就把这个目录当成普通目录。__init__.py可以是空文件，也可以有python代码。__init__.py本身就是一个模块，模块名为目录名mycompany。
使用模块：
	--任何模块代码的第一个字符串被视为模块的文档注释。
	--__author__变量把作者写进去。
	--if __name__ == '__main__':
	  	test()
	  让一个模块通过命令行运行时执行额外的代码，常见的就是运行测试。
	 --如果只是导入该模块，则不会执行test函数，调用hello.test()时才会执行该函数。
	 --__xx__特殊变量，可以被直接引用。
	 --_xxx/__xxx：非公开变量，不应该被直接引用。
安装第三方模块：
	--查找库的网址，pypi.python.org
	--安装库：pip3 install Pillow
	--添加搜索目录方法1:(运行时修改，结束后失效)
	  import sys
	  sys.path.append('/home/pro/python')
	--添加搜索目录方法2：
	  设置环境变量PYTHONPATH。
面向对象编程：
	--面向对象编程把对象作为程序的基本单元。一个对象包含了数据和操作数据的函数。
	--在python中，所有数据类型都可以视为对象，当然可以自定义对象。自定义的对象数据类型就是面向对象中的类的概念。
类和实例：
	--类是抽象的模板，实例是根据类创建出来的一个个具体的对象。
	--class Student(object):
	  	pass
	--Student: class后紧接类名，通常以大写字母开头。
	--(object)：表示该类从哪个类继承下来。
	--类名+()：创建实例。
	--__init__：特殊方法，创建实例时把属性绑定上去。
	--__init__：第一个参数永远是self，表示创建的实例本身。
	--类中定义的函数：与普通函数相比，只有一点不同，就是第一个函数永远是实例self，且调用时，不用传该参数。
类的访问限制：
	--私有变量：属性名称前面加两个下划线__，外部不能访问。访问方法：__name变成_Student__name。
	--__xxx__：特殊变量，可以直接访问。
继承和多态：
	--继承：子类获得父类的全部功能。
	--多态：子类、父类存在相同方法时，子类方法覆盖父类方法，总是调用子类方法。
	--判断变量是否是某个类型:isinstance()
静态语言vs动态语言：
	--静态语言：传入相应类型或者子类，否则无法调用相应方法。
	--动态语言：不要求严格的继承体系，“file like object”即可。	
获取对象信息：
	--type()：判断对象类型。
	--import types
	--判断一个对象是否是函数，使用types模块中定义的常量。
	--types.FunctionTpe:是否是函数
	--types.BuiltinFunctionType:是否是内建函数
	--types.LambdaType:是否是匿名函数
	--types.GenerationType:是否是发生器
	--isinstance():对于class继承关系，使用该函数。判断该类型是否是该类型本身，或者位于该类型的父继承链上。
	--dir()：获取一个对象的所有属性和方法，是一个list。
__slots__:
	--__slots__：python允许在定义class时，定义特殊变量__slots__，来限制该class实例能添加的属性。
	--仅对当前类实例起作用，对继承的子类不起作用。
@property:
	--把一个方法变成属性。
	--@property：把一个getter方法变成属性；
	--@score.setter:@property本身创建了另一个装饰器，负责把一个setter方法变成属性赋值。
Mixln:
	--让类同时继承好几个类的方法，此种设计称之为Mixln。
	--Mixln目的：给一个类增加多个功能。
__len__():
	--让class作用于len()函数。
__str__:
	--自定义__str__()方法，print()返回一个好看的字符串。
	--直接显示变量则调用__repr__()，返回程序员看到的字符串。
__iter__:
	--__iter__():返回一个迭代对象，该类则可被用于for...in循环，for循环不断调用该迭代对象的__next__()方法，直到遇到StopIteration错误时退出循环。
__getitem__:
	--__getitem__()：定义该方法，可以表现的像list那样按照下标取出元素。
__getattr__:
	--__getattr__():动态返回一个属性。
__call__:
	--__call__():可以直接对实例进行调用。
	--查看一个对象能否被调用，使用callable()

return:
	--函数被调用会返回一个指定值；
	--默认返回None
	--return 返回值
	--返回值可以是任意类型
	--return执行后，函数终止
	--区分返回值和打印
lambda：
	--快速定义单行的最小函数
	--返回函数对象
map:
	--将传入的函数依次作用于序列的每个元素。结果作为新的Iterator返回。
	--list(map(f, range(1,10)))
filter:
	--和map()类似，接收一个函数和一个序列。函数作用于每个元素，根据返回值是True还是False决定是否保留该元素。
reduce:
	--把一个函数作用于一个序列，此函数需接收两个参热，reduce继续将结果与下个元素做累计计算。
	--reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
	--from functools import reduce
yield:
	--把一个函数变成一个generator.
	--调用fab(5)不会执行fab函数，而是返回一个iterable对象。
	--for循环中，每次循环都会执行fab函数内部代码，执行到yield b时，fab函数就返回一个迭代值，下次迭代时，代码从yield b的下一条语句继续执行，而函数本身变量和上次中断执行前是完全一样。
	--在generator function中，如果没有return，则默认执行至函数结束，如果执行过程中return，则直接抛出Stopiteration终止迭代。
sorted:
	--可以对list进行排序；
	--接收key函数实现自定义排序。
	--进行反向排序，可传入第三个参数：reverse=True.
try/except/else/finally:
	--try/except主要处理程序正常执行过程中出现的一些异常。
	--try/finally主要用于无论是否发生异常，均需要执行清理工作场合。
	--执行try语句，发生异常则进行except；无异常则进入else；无论异常与否，均执行finally。
读写文件：
	--open()，打开文件。
	--read()，一次性读取文件全部内容至内存，用str表示。
	--close(),关闭文件。
	--with open() as f:自动调用close()方法。
	--read(size),每次读取size个字节内容。
	--readline(),每次读取一行内容。
	--readlines(),一次读取所有内容并按行返回list.
StringIO_BytesIO:
	--StringIO在内存中读写str。
	--BytesIO在内存中读写bytes。
序列化：
	--把变量从内存变成可存储或传输的过程成为序列化。
	--import pinkle
	--pickle.dumps()把任意对象序列换成一个bytes，就可以写入文件。
	--pickle.dump()直接把对象序列化后写入file-like Object。
	--pickle.loads()反序列化，把对象从磁盘读入内存时，先把内容读到一个bytes。
	--pickle.load()直接从一个file-like Object中直接反序列化出对象。
JSON：
	--import json
	--dict对象可以序列化为JSON的{}
	--json.dumps(class, default=lambda obj: obj.__dict__) 类实例序列化为json
	--json.loads(json_str, object_hook=dict2class) json反序列化为类实例对象
Process:
	--from multiprocessing import Process
	--Process类代表一个进程对象
	--p = Process(target=run_proc, args=('test',))
	--p.start()
	--p.join()
Pool:
	--from multiprocessing import Pool
	--如果需要大量的子进程，可通过进程池的方式批量创建子进程。
	--p = Pool(4)
	--p.apply_async(long_time_task, args=(i,))
	--p.close()
	--p.join()
subprocess:
	--创建子进程，且控制子进程输入输出。
	--import subprocess
	--r = subprocess.call(['nslookup', 'www.python.org'])
	--控制输入输出：
	p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	--output, err = p.communicate(b'set q=mx\npython.org\nexit\n')
	--print(output.decode('utf-8'))
	--print('Exit code:', p.returncode)
Queue：
	--实现进程间通信。
	--from multiprocessing import Queue
	--q = Queue()
	--pw = Process(target=write, args=(q,))
	--pr = Process(target=read, args=(q,))
	--pw.start()
	--q.put(value)
	--pr.start()
	--q.get(True)
	--pw.join()
	--pr.terminate()
threading:
	--启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行。
	--import threading
	--任何进程默认都会启动一个线程，我们称之为主线程，主线程又可以启动新的线程，主线程名字MainThread。
	--threading模块的current_thread()函数，返回当前线程的实例。
	--创建一个锁，lock = threading.Lock()
	--获取锁，lock.acquire()
	--释放锁，lock.release()